import requests
from urllib.parse import urlparse, quote
import ssl
import socket

# 1. HTTP Başlıkları (HTTP Headers) Tarayıcı:
def scan_http_headers(url):
    print(f"\nHTTP Başlıkları taranıyor: {url}")
    try:
        response = requests.get(url)
        headers = response.headers
        
        # Güvenlik açığı tespiti için bazı başlıkları kontrol et
        if 'X-Powered-By' in headers:
            print(f"Uyarı: X-Powered-By başlığı bulunuyor: {headers['X-Powered-By']}")
        
        if 'X-Frame-Options' not in headers:
            print("Uyarı: X-Frame-Options başlığı eksik. Bu, clickjacking saldırılarına karşı koruma sağlamaz.")
        
        if 'Strict-Transport-Security' not in headers:
            print("Uyarı: Strict-Transport-Security başlığı eksik. HTTPS üzerinden koruma eksik.")
        
        if 'X-XSS-Protection' not in headers:
            print("Uyarı: X-XSS-Protection başlığı eksik. Bu, XSS saldırılarına karşı koruma sağlamaz.")
        
        if 'Content-Security-Policy' not in headers:
            print("Uyarı: Content-Security-Policy başlığı eksik. Bu, XSS ve veri enjeksiyonlarına karşı koruma sağlamaz.")
        
    except requests.exceptions.RequestException as e:
        print(f"HTTP başlık tarama hatası: {e}")

# 2. SSL/TLS Zayıflıkları Kontrolü:
def scan_ssl_tls(url):
    print(f"\nSSL/TLS güvenlik taraması başlatılıyor: {url}")
    try:
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
        
        context = ssl.create_default_context()
        conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=hostname)
        conn.settimeout(5)
        
        conn.connect((hostname, 443))  # HTTPS portu 443
        certificate = conn.getpeercert()
        conn.close()
        
        print(f"SSL/TLS sertifikası: {certificate['subject']}")
        
        # Sertifikanın geçerliliğini kontrol et
        if not certificate:
            print("Uyarı: SSL/TLS sertifikası geçerli değil.")
        else:
            print("SSL/TLS bağlantısı güvenli görünüyor.")
    except ssl.SSLError as e:
        print(f"SSL/TLS hatası: {e}")
    except Exception as e:
        print(f"SSL/TLS taraması sırasında hata: {e}")

# 3. SQL Injection Testi:
def scan_sql_injection(url):
    print(f"\nSQL Injection testi başlatılıyor: {url}")
    payloads = ["' OR 1=1 --", "' OR 'a'='a", '" OR "" = "']
    
    # URL'yi analiz et ve parametreleri ayıkla
    parsed_url = urlparse(url)
    base_url = parsed_url.scheme + "://" + parsed_url.hostname + parsed_url.path
    query_params = parsed_url.query
    
    for payload in payloads:
        # Eğer URL'de parametre varsa, SQL injection payload'larını bu parametreye ekle
        if query_params:
            test_url = f"{base_url}?{query_params}&test={quote(payload)}"
        else:
            test_url = f"{base_url}?test={quote(payload)}"
        
        try:
            response = requests.get(test_url)
            if "error" in response.text or "syntax" in response.text:
                print(f"Potansiyel SQL Injection açığı bulundu: {test_url}")
            else:
                print(f"SQL Injection testi başarısız: {test_url}")
        except requests.exceptions.RequestException as e:
            print(f"SQL Injection testi sırasında hata: {e}")

# Zafiyet taramasını çalıştıran fonksiyon
def run_vulnerability_scan(url):
    print(f"\nZafiyet taraması başlatılıyor: {url}")
    scan_http_headers(url)
    scan_ssl_tls(url)
    scan_sql_injection(url)

def main():
    url = input("Tarama yapmak için URL girin (Örnek: https://example.com): ")
    # URL'nin 'https://' ile başladığını kontrol et
    if not url.startswith('https://'):
        print("Lütfen geçerli bir HTTPS URL'si girin.")
        return
    run_vulnerability_scan(url)

if __name__ == "__main__":
    main()
